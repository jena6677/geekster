unique number of occurance

class Solution {
    public boolean uniqueOccurrences(int[] arr) {
        HashMap<Integer, Integer> map = new HashMap<>();
        ArrayList<Integer> list = new ArrayList<Integer>();
        for(int i = 0; i < arr.length; i++)
        {
            if(map.containsKey(arr[i]))
            {
                map.put(arr[i],map.get(arr[i])+1);
            }
            else
            {
                map.put(arr[i],1);
            }
        }
        
        for(int i : map.values())
        {
            if(list.contains(i))
            {
                return false;
            }
            else
            {
                list.add(i);
            }
        }
        return true;
    }
}

two sum

class Solution 
{
    public int[] twoSum(int[] nums, int target) 
    {
        ArrayList<Integer> list = new ArrayList<Integer>();
        int[] arr = new int[2];
        for(int i = 0; i < nums.length; i++)
        {
            if(list.contains(target - nums[i]))
            {
                arr[0] = list.indexOf(target-nums[i]);
                arr[1] = i;
                return arr;
            }
            else
            {
                list.add(nums[i]);
            }
        }
        return arr;
    }
}

jewels and stones

class Solution {
    public int numJewelsInStones(String jewels, String stones) {
        HashSet<Character> set = new HashSet<>();
        
        for(int i = 0; i < jewels.length(); i++)
        {
            set.add(jewels.charAt(i));
        }
        int count = 0;
        
        for(int i = 0; i < stones.length(); i++)
        {
            if(set.contains(stones.charAt(i)))
            {
                count++;
            }
        }
        return count;
    }
}

array subset of another array

class Compute {
    public String isSubset( long a1[], long a2[], long n, long m) {
        
        HashSet<Long> set = new HashSet<>();
    
        for(int i = 0; i < a1.length; i++)
        {
            set.add(a1[i]);
        }
        for(int i = 0; i < a2.length; i++)
        {
            if(!set.contains(a2[i]))
            {
                return "No";
            }
        }
        return "Yes";
    }
}

find missing element of a range in a array

public class FindMissingElementInARange {

	public static void main(String[] args) {
		
		int[] arr = {1,2,3,50,52,54,55,60};
		int low = 50, high = 60;
		int[] arr2 = new int[(high-low)+1];
		for(int i = 50; i <= 60; i++)
		{
			arr2[i-50] = i;
		}
		
		HashSet<Integer> set = new HashSet<>();
		
		for(int i = 0; i < arr.length; i++)
		{
			set.add(arr[i]);
		}
		
		for(int i = 0; i < arr2.length; i++)
		{
			if(!set.contains((Object)arr2[i]))
			{
				System.out.print(arr2[i]+" ");
			}
		}
	}
}